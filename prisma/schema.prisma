// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model Store{
  id  String @id @default(uuid())
  name  String
  userId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  product Product[] @relation("StoreToProduct")
  order Order[] @relation("StoreToOrder")

}

model Billboard{
  id String @id @default(uuid())
  storeId String
  label String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store Store @relation("StoreToBillboard",fields: [storeId],references: [id])
  categories Category[] @relation("StoreToBillboard")

  @@index([storeId])
}

model Category{
  id String @id @default(uuid())
  storeId String
  name String
  store Store @relation("StoreToCategory",fields: [storeId],references: [id])
  billboardId String
  billboard Billboard @relation("StoreToBillboard",fields: [billboardId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])

}


model Size{
  id String @id @default(uuid())
  name String
  value String
  storeId String
  store Store @relation("StoreToSize",fields: [storeId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product[] 

  @@index([storeId])

}

model Color{
  id String @id @default(uuid())
  name String
  value String
  storeId String
  store Store @relation("StoreToColor",fields: [storeId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product[] 

  @@index([storeId])
}

model Product{
  id String @id @default(uuid())
  name String
  price Decimal
  isArchived Boolean
  isFeatured Boolean
  storeId String
  store Store @relation("StoreToProduct",fields: [storeId],references: [id])
  colorId String
  color Color @relation(fields: [colorId],references: [id])
  sizeId String
  size Size @relation( fields: [sizeId],references: [id])
  categoryId String
  category Category @relation("CategoryToProduct",fields: [categoryId],references: [id])
  images Image[]
  comment Comment[] @relation("ProductToComment")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderItem OrderItem[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image{
  id String @id @default(uuid())
  url String
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order{
  id String @id @default(uuid())
  phone String   @default("")
  address String   @default("")
  isPaid Boolean  @default(false)
  storeId String
  store Store @relation("StoreToOrder",fields: [storeId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItem OrderItem[]

  @@index([storeId])
}

model OrderItem{
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId],references: [id])
  productId String
  product Product @relation(fields: [productId],references: [id])

  @@index([orderId])
  @@index([productId])
}

model Comment{
  id String @id @default(uuid())
  content String
  productId String
  product Product @relation("ProductToComment",fields: [productId],references: [id])
  createdAt DateTime @default(now())

  @@index([productId])

}